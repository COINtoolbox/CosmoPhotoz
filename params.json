{"name":"Cosmophotoz","tagline":"Photometric redshift estimator utilising Generalized Linear Models.","body":"---\r\ntitle: \"Photometric Redshift with CosmoPhotoz\"\r\nauthors: Rafael S. de Souza, Jonny Elliot, Alberto Krone-Martins, Ã‰mille Ishida, Joseph\r\n  Hilbe\r\noutput: html_document\r\nruntime: shiny\r\n---\r\n\r\nThis is a short tutorial explaining how to perform photometric redshift estimation using the CosmoPhotoz R package.\r\n\r\n# Required libraries\r\n```{r,results='hide',message=FALSE, cache=FALSE}\r\ninstall.packages('devtools') ; library(devtools)   # needed for github interface\r\ninstall.packages('arm') ; library(arm)   # imports for CosmoPhotoz\r\ninstall.packages('COUNT') ; library(COUNT)\r\ninstall.packages('pcaPP') ; library(pcaPP)\r\nrequire(CosmoPhotoz)\r\nrequire(ggplot2)\r\n\r\n```\r\n\r\n\r\nLoad the PHAT0 data included in the package. Here we are using 5% of all dataset for training. \r\n\r\n\r\n```{r}\r\ndata(PHAT0train)\r\n\r\ndata(PHAT0test)\r\n```\r\n\r\n\r\n\r\n\r\n```{r}\r\nPC_comb<-computeCombPCA(subset(PHAT0train,select=c(-redshift)),\r\n                       subset(PHAT0test,select=c(-redshift)))\r\n```\r\n\r\nNumber of variance explained by each PC \r\n```{r}\r\nPC_comb$PCsum\r\n```\r\n\r\nAdd the redshift column to the PCA projections of the  Training sample\r\n\r\n```{r}\r\nTrainpc<-cbind(PC_comb$x,redshift=PHAT0train$redshift)\r\n\r\n```\r\n\r\n\r\nStore the PCA projections for the testing sample in the vector Testpc\r\n\r\n```{r, echo=FALSE}\r\nTestpc<-PC_comb$y\r\n```\r\n\r\n\r\nTrain  the glm model using Gamma Family. 6 PCs explain 99.5% of data variance. In order to account for small variations in the shape, we include a polynomial term for the 2 first PCs (95% of data variance) \r\n\r\n```{r}\r\n\r\nFit<-glmTrainPhotoZ(Trainpc,formula=redshift~poly(Comp.1,2)*poly(Comp.2,2)*Comp.3*Comp.4*Comp.5*Comp.6,method=\"Bayesian\",family=\"gamma\")\r\n\r\n```\r\n\r\n\r\n\r\nOnce we fit our GLM model, we can predict the redshift for the \"photometric\" sample\r\n \r\n```{r, echo=FALSE}\r\n\r\nphotoz<-predict(Fit$glmfit,newdata = Testpc,type=\"response\")\r\n\r\n```\r\n\r\nStore the redshift from the testing sample in the vector specz for comparison \r\n\r\n```{r, echo=FALSE}\r\nspecz<-PHAT0test$redshift\r\n```\r\n\r\n\r\nCompute basic diagnostic statistics \r\n\r\n\r\n\r\n```{r, echo=FALSE}\r\ncomputeDiagPhotoZ(photoz, specz)\r\n```\r\n\r\n\r\n\r\nCreate basic diagnostic   plots\r\n\r\nKernel density distribution of the full scatter \r\n $(specz-photoz)/(1+specz)$\r\n \r\n```{r,fig.width=8, fig.height=9}\r\nplotDiagPhotoZ(photoz, specz, type = \"errordist\")\r\n\r\n```\r\n\r\nPredicted vs Actuall values\r\nSelect 15,000 points to show\r\n```{r}\r\ndatashow<-sample(length(photoz),15000)\r\n```\r\n\r\n\r\n```{r,fig.width=8, fig.height=9}\r\nplotDiagPhotoZ(photoz[datashow], specz[datashow], type = \"predobs\")+coord_cartesian(xlim =c(0,1.5), ylim = c(0,1.5))\r\n```\r\n\r\n\r\nScatter distribution as a function of redshift, violin plot\r\n\r\n```{r,fig.width=12, fig.height=9}\r\nplotDiagPhotoZ(photoz, specz, type = \"errorviolins\")\r\n```\r\n\r\n\r\n\r\nScatter distribution as a function of redshift, box plot\r\n\r\n```{r,fig.width=12, fig.height=9}\r\nplotDiagPhotoZ(photoz, specz, type = \"box\")\r\n```\r\n\r\n\r\n```{r, echo=FALSE}\r\nrunApp(paste(find.package(\"CosmoPhotoz\"),\"/CosmoPhotoz_shiny\",sep=\"\"))\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}